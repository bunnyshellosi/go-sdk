/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ComponentGitItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentGitItem{}

// ComponentGitItem Git info
type ComponentGitItem struct {
	// Service component identifier
	Id *string `json:"id,omitempty"`
	// Service component name
	Name *string `json:"name,omitempty"`
	// Git repository
	Repository *string `json:"repository,omitempty"`
	// Git ref name
	RefName *string `json:"refName,omitempty"`
	// Git application path
	Path NullableString `json:"path,omitempty"`
	// Git ref sha
	RefSha NullableString `json:"refSha,omitempty"`
	// Git deployed sha
	DeployedSha NullableString `json:"deployedSha,omitempty"`
	// Environment identifier.
	Environment *string `json:"environment,omitempty"`
}

// NewComponentGitItem instantiates a new ComponentGitItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentGitItem() *ComponentGitItem {
	this := ComponentGitItem{}
	return &this
}

// NewComponentGitItemWithDefaults instantiates a new ComponentGitItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentGitItemWithDefaults() *ComponentGitItem {
	this := ComponentGitItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ComponentGitItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentGitItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ComponentGitItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ComponentGitItem) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ComponentGitItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentGitItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ComponentGitItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ComponentGitItem) SetName(v string) {
	o.Name = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *ComponentGitItem) GetRepository() string {
	if o == nil || IsNil(o.Repository) {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentGitItem) GetRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *ComponentGitItem) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *ComponentGitItem) SetRepository(v string) {
	o.Repository = &v
}

// GetRefName returns the RefName field value if set, zero value otherwise.
func (o *ComponentGitItem) GetRefName() string {
	if o == nil || IsNil(o.RefName) {
		var ret string
		return ret
	}
	return *o.RefName
}

// GetRefNameOk returns a tuple with the RefName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentGitItem) GetRefNameOk() (*string, bool) {
	if o == nil || IsNil(o.RefName) {
		return nil, false
	}
	return o.RefName, true
}

// HasRefName returns a boolean if a field has been set.
func (o *ComponentGitItem) HasRefName() bool {
	if o != nil && !IsNil(o.RefName) {
		return true
	}

	return false
}

// SetRefName gets a reference to the given string and assigns it to the RefName field.
func (o *ComponentGitItem) SetRefName(v string) {
	o.RefName = &v
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComponentGitItem) GetPath() string {
	if o == nil || IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComponentGitItem) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *ComponentGitItem) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *ComponentGitItem) SetPath(v string) {
	o.Path.Set(&v)
}

// SetPathNil sets the value for Path to be an explicit nil
func (o *ComponentGitItem) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *ComponentGitItem) UnsetPath() {
	o.Path.Unset()
}

// GetRefSha returns the RefSha field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComponentGitItem) GetRefSha() string {
	if o == nil || IsNil(o.RefSha.Get()) {
		var ret string
		return ret
	}
	return *o.RefSha.Get()
}

// GetRefShaOk returns a tuple with the RefSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComponentGitItem) GetRefShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RefSha.Get(), o.RefSha.IsSet()
}

// HasRefSha returns a boolean if a field has been set.
func (o *ComponentGitItem) HasRefSha() bool {
	if o != nil && o.RefSha.IsSet() {
		return true
	}

	return false
}

// SetRefSha gets a reference to the given NullableString and assigns it to the RefSha field.
func (o *ComponentGitItem) SetRefSha(v string) {
	o.RefSha.Set(&v)
}

// SetRefShaNil sets the value for RefSha to be an explicit nil
func (o *ComponentGitItem) SetRefShaNil() {
	o.RefSha.Set(nil)
}

// UnsetRefSha ensures that no value is present for RefSha, not even an explicit nil
func (o *ComponentGitItem) UnsetRefSha() {
	o.RefSha.Unset()
}

// GetDeployedSha returns the DeployedSha field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComponentGitItem) GetDeployedSha() string {
	if o == nil || IsNil(o.DeployedSha.Get()) {
		var ret string
		return ret
	}
	return *o.DeployedSha.Get()
}

// GetDeployedShaOk returns a tuple with the DeployedSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComponentGitItem) GetDeployedShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeployedSha.Get(), o.DeployedSha.IsSet()
}

// HasDeployedSha returns a boolean if a field has been set.
func (o *ComponentGitItem) HasDeployedSha() bool {
	if o != nil && o.DeployedSha.IsSet() {
		return true
	}

	return false
}

// SetDeployedSha gets a reference to the given NullableString and assigns it to the DeployedSha field.
func (o *ComponentGitItem) SetDeployedSha(v string) {
	o.DeployedSha.Set(&v)
}

// SetDeployedShaNil sets the value for DeployedSha to be an explicit nil
func (o *ComponentGitItem) SetDeployedShaNil() {
	o.DeployedSha.Set(nil)
}

// UnsetDeployedSha ensures that no value is present for DeployedSha, not even an explicit nil
func (o *ComponentGitItem) UnsetDeployedSha() {
	o.DeployedSha.Unset()
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *ComponentGitItem) GetEnvironment() string {
	if o == nil || IsNil(o.Environment) {
		var ret string
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentGitItem) GetEnvironmentOk() (*string, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *ComponentGitItem) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given string and assigns it to the Environment field.
func (o *ComponentGitItem) SetEnvironment(v string) {
	o.Environment = &v
}

func (o ComponentGitItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentGitItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if !IsNil(o.RefName) {
		toSerialize["refName"] = o.RefName
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	if o.RefSha.IsSet() {
		toSerialize["refSha"] = o.RefSha.Get()
	}
	if o.DeployedSha.IsSet() {
		toSerialize["deployedSha"] = o.DeployedSha.Get()
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	return toSerialize, nil
}

type NullableComponentGitItem struct {
	value *ComponentGitItem
	isSet bool
}

func (v NullableComponentGitItem) Get() *ComponentGitItem {
	return v.value
}

func (v *NullableComponentGitItem) Set(val *ComponentGitItem) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentGitItem) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentGitItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentGitItem(val *ComponentGitItem) *NullableComponentGitItem {
	return &NullableComponentGitItem{value: val, isSet: true}
}

func (v NullableComponentGitItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentGitItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
