/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the EnvironmentEditConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentEditConfiguration{}

// EnvironmentEditConfiguration An environment holds a collection of buildable and deployable components.
type EnvironmentEditConfiguration struct {
	Configuration *EnvironmentEditConfigurationConfiguration `json:"configuration,omitempty"`
}

// NewEnvironmentEditConfiguration instantiates a new EnvironmentEditConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentEditConfiguration() *EnvironmentEditConfiguration {
	this := EnvironmentEditConfiguration{}
	return &this
}

// NewEnvironmentEditConfigurationWithDefaults instantiates a new EnvironmentEditConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentEditConfigurationWithDefaults() *EnvironmentEditConfiguration {
	this := EnvironmentEditConfiguration{}
	return &this
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *EnvironmentEditConfiguration) GetConfiguration() EnvironmentEditConfigurationConfiguration {
	if o == nil || IsNil(o.Configuration) {
		var ret EnvironmentEditConfigurationConfiguration
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentEditConfiguration) GetConfigurationOk() (*EnvironmentEditConfigurationConfiguration, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *EnvironmentEditConfiguration) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given EnvironmentEditConfigurationConfiguration and assigns it to the Configuration field.
func (o *EnvironmentEditConfiguration) SetConfiguration(v EnvironmentEditConfigurationConfiguration) {
	o.Configuration = &v
}

func (o EnvironmentEditConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentEditConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	return toSerialize, nil
}

type NullableEnvironmentEditConfiguration struct {
	value *EnvironmentEditConfiguration
	isSet bool
}

func (v NullableEnvironmentEditConfiguration) Get() *EnvironmentEditConfiguration {
	return v.value
}

func (v *NullableEnvironmentEditConfiguration) Set(val *EnvironmentEditConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentEditConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentEditConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentEditConfiguration(val *EnvironmentEditConfiguration) *NullableEnvironmentEditConfiguration {
	return &NullableEnvironmentEditConfiguration{value: val, isSet: true}
}

func (v NullableEnvironmentEditConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentEditConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
