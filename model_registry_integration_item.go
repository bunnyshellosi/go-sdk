/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the RegistryIntegrationItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegistryIntegrationItem{}

// RegistryIntegrationItem A Registry integration stores connection information for a Container registry.
type RegistryIntegrationItem struct {
	// Registry integration identifier.
	Id *string `json:"id,omitempty"`
	// Registry integration name.
	Name *string `json:"name,omitempty"`
	// Registry integration provider.
	ProviderName *string `json:"providerName,omitempty"`
	// Registry integration status.
	Status *string `json:"status,omitempty"`
	// Organization identifier.
	Organization *string `json:"organization,omitempty"`
}

// NewRegistryIntegrationItem instantiates a new RegistryIntegrationItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistryIntegrationItem() *RegistryIntegrationItem {
	this := RegistryIntegrationItem{}
	return &this
}

// NewRegistryIntegrationItemWithDefaults instantiates a new RegistryIntegrationItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistryIntegrationItemWithDefaults() *RegistryIntegrationItem {
	this := RegistryIntegrationItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RegistryIntegrationItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryIntegrationItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RegistryIntegrationItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RegistryIntegrationItem) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RegistryIntegrationItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryIntegrationItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RegistryIntegrationItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RegistryIntegrationItem) SetName(v string) {
	o.Name = &v
}

// GetProviderName returns the ProviderName field value if set, zero value otherwise.
func (o *RegistryIntegrationItem) GetProviderName() string {
	if o == nil || IsNil(o.ProviderName) {
		var ret string
		return ret
	}
	return *o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryIntegrationItem) GetProviderNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderName) {
		return nil, false
	}
	return o.ProviderName, true
}

// HasProviderName returns a boolean if a field has been set.
func (o *RegistryIntegrationItem) HasProviderName() bool {
	if o != nil && !IsNil(o.ProviderName) {
		return true
	}

	return false
}

// SetProviderName gets a reference to the given string and assigns it to the ProviderName field.
func (o *RegistryIntegrationItem) SetProviderName(v string) {
	o.ProviderName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RegistryIntegrationItem) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryIntegrationItem) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RegistryIntegrationItem) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RegistryIntegrationItem) SetStatus(v string) {
	o.Status = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *RegistryIntegrationItem) GetOrganization() string {
	if o == nil || IsNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistryIntegrationItem) GetOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *RegistryIntegrationItem) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *RegistryIntegrationItem) SetOrganization(v string) {
	o.Organization = &v
}

func (o RegistryIntegrationItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegistryIntegrationItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProviderName) {
		toSerialize["providerName"] = o.ProviderName
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	return toSerialize, nil
}

type NullableRegistryIntegrationItem struct {
	value *RegistryIntegrationItem
	isSet bool
}

func (v NullableRegistryIntegrationItem) Get() *RegistryIntegrationItem {
	return v.value
}

func (v *NullableRegistryIntegrationItem) Set(val *RegistryIntegrationItem) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistryIntegrationItem) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistryIntegrationItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistryIntegrationItem(val *RegistryIntegrationItem) *NullableRegistryIntegrationItem {
	return &NullableRegistryIntegrationItem{value: val, isSet: true}
}

func (v NullableRegistryIntegrationItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistryIntegrationItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
