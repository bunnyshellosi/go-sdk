/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// EnvironmentEditConfigurationConfiguration - The environment update source
type EnvironmentEditConfigurationConfiguration struct {
	FromGit      *FromGit
	FromGitSpec  *FromGitSpec
	FromString   *FromString
	FromTemplate *FromTemplate
}

// FromGitAsEnvironmentEditConfigurationConfiguration is a convenience function that returns FromGit wrapped in EnvironmentEditConfigurationConfiguration
func FromGitAsEnvironmentEditConfigurationConfiguration(v *FromGit) EnvironmentEditConfigurationConfiguration {
	return EnvironmentEditConfigurationConfiguration{
		FromGit: v,
	}
}

// FromGitSpecAsEnvironmentEditConfigurationConfiguration is a convenience function that returns FromGitSpec wrapped in EnvironmentEditConfigurationConfiguration
func FromGitSpecAsEnvironmentEditConfigurationConfiguration(v *FromGitSpec) EnvironmentEditConfigurationConfiguration {
	return EnvironmentEditConfigurationConfiguration{
		FromGitSpec: v,
	}
}

// FromStringAsEnvironmentEditConfigurationConfiguration is a convenience function that returns FromString wrapped in EnvironmentEditConfigurationConfiguration
func FromStringAsEnvironmentEditConfigurationConfiguration(v *FromString) EnvironmentEditConfigurationConfiguration {
	return EnvironmentEditConfigurationConfiguration{
		FromString: v,
	}
}

// FromTemplateAsEnvironmentEditConfigurationConfiguration is a convenience function that returns FromTemplate wrapped in EnvironmentEditConfigurationConfiguration
func FromTemplateAsEnvironmentEditConfigurationConfiguration(v *FromTemplate) EnvironmentEditConfigurationConfiguration {
	return EnvironmentEditConfigurationConfiguration{
		FromTemplate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *EnvironmentEditConfigurationConfiguration) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FromGit
	err = newStrictDecoder(data).Decode(&dst.FromGit)
	if err == nil {
		jsonFromGit, _ := json.Marshal(dst.FromGit)
		if string(jsonFromGit) == "{}" { // empty struct
			dst.FromGit = nil
		} else {
			match++
		}
	} else {
		dst.FromGit = nil
	}

	// try to unmarshal data into FromGitSpec
	err = newStrictDecoder(data).Decode(&dst.FromGitSpec)
	if err == nil {
		jsonFromGitSpec, _ := json.Marshal(dst.FromGitSpec)
		if string(jsonFromGitSpec) == "{}" { // empty struct
			dst.FromGitSpec = nil
		} else {
			match++
		}
	} else {
		dst.FromGitSpec = nil
	}

	// try to unmarshal data into FromString
	err = newStrictDecoder(data).Decode(&dst.FromString)
	if err == nil {
		jsonFromString, _ := json.Marshal(dst.FromString)
		if string(jsonFromString) == "{}" { // empty struct
			dst.FromString = nil
		} else {
			match++
		}
	} else {
		dst.FromString = nil
	}

	// try to unmarshal data into FromTemplate
	err = newStrictDecoder(data).Decode(&dst.FromTemplate)
	if err == nil {
		jsonFromTemplate, _ := json.Marshal(dst.FromTemplate)
		if string(jsonFromTemplate) == "{}" { // empty struct
			dst.FromTemplate = nil
		} else {
			match++
		}
	} else {
		dst.FromTemplate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FromGit = nil
		dst.FromGitSpec = nil
		dst.FromString = nil
		dst.FromTemplate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EnvironmentEditConfigurationConfiguration)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EnvironmentEditConfigurationConfiguration)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EnvironmentEditConfigurationConfiguration) MarshalJSON() ([]byte, error) {
	if src.FromGit != nil {
		return json.Marshal(&src.FromGit)
	}

	if src.FromGitSpec != nil {
		return json.Marshal(&src.FromGitSpec)
	}

	if src.FromString != nil {
		return json.Marshal(&src.FromString)
	}

	if src.FromTemplate != nil {
		return json.Marshal(&src.FromTemplate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EnvironmentEditConfigurationConfiguration) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FromGit != nil {
		return obj.FromGit
	}

	if obj.FromGitSpec != nil {
		return obj.FromGitSpec
	}

	if obj.FromString != nil {
		return obj.FromString
	}

	if obj.FromTemplate != nil {
		return obj.FromTemplate
	}

	// all schemas are nil
	return nil
}

type NullableEnvironmentEditConfigurationConfiguration struct {
	value *EnvironmentEditConfigurationConfiguration
	isSet bool
}

func (v NullableEnvironmentEditConfigurationConfiguration) Get() *EnvironmentEditConfigurationConfiguration {
	return v.value
}

func (v *NullableEnvironmentEditConfigurationConfiguration) Set(val *EnvironmentEditConfigurationConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentEditConfigurationConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentEditConfigurationConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentEditConfigurationConfiguration(val *EnvironmentEditConfigurationConfiguration) *NullableEnvironmentEditConfigurationConfiguration {
	return &NullableEnvironmentEditConfigurationConfiguration{value: val, isSet: true}
}

func (v NullableEnvironmentEditConfigurationConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentEditConfigurationConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
