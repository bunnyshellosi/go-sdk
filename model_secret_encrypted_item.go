/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the SecretEncryptedItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretEncryptedItem{}

// SecretEncryptedItem A secret is used to encrypt plain texts and decrypt cipher texts.
type SecretEncryptedItem struct {
	// Encrypted expression.
	Expression *string `json:"expression,omitempty"`
	// Organization identifier.
	Organization *string `json:"organization,omitempty"`
}

// NewSecretEncryptedItem instantiates a new SecretEncryptedItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretEncryptedItem() *SecretEncryptedItem {
	this := SecretEncryptedItem{}
	return &this
}

// NewSecretEncryptedItemWithDefaults instantiates a new SecretEncryptedItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretEncryptedItemWithDefaults() *SecretEncryptedItem {
	this := SecretEncryptedItem{}
	return &this
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *SecretEncryptedItem) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretEncryptedItem) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *SecretEncryptedItem) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *SecretEncryptedItem) SetExpression(v string) {
	o.Expression = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *SecretEncryptedItem) GetOrganization() string {
	if o == nil || IsNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretEncryptedItem) GetOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *SecretEncryptedItem) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *SecretEncryptedItem) SetOrganization(v string) {
	o.Organization = &v
}

func (o SecretEncryptedItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretEncryptedItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	return toSerialize, nil
}

type NullableSecretEncryptedItem struct {
	value *SecretEncryptedItem
	isSet bool
}

func (v NullableSecretEncryptedItem) Get() *SecretEncryptedItem {
	return v.value
}

func (v *NullableSecretEncryptedItem) Set(val *SecretEncryptedItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretEncryptedItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretEncryptedItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretEncryptedItem(val *SecretEncryptedItem) *NullableSecretEncryptedItem {
	return &NullableSecretEncryptedItem{value: val, isSet: true}
}

func (v NullableSecretEncryptedItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretEncryptedItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
