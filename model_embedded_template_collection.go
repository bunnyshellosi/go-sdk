/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// EmbeddedTemplateCollection struct for EmbeddedTemplateCollection
type EmbeddedTemplateCollection struct {
	Item []TemplateCollection `json:"item,omitempty"`
}

// NewEmbeddedTemplateCollection instantiates a new EmbeddedTemplateCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddedTemplateCollection() *EmbeddedTemplateCollection {
	this := EmbeddedTemplateCollection{}
	return &this
}

// NewEmbeddedTemplateCollectionWithDefaults instantiates a new EmbeddedTemplateCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddedTemplateCollectionWithDefaults() *EmbeddedTemplateCollection {
	this := EmbeddedTemplateCollection{}
	return &this
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *EmbeddedTemplateCollection) GetItem() []TemplateCollection {
	if o == nil || o.Item == nil {
		var ret []TemplateCollection
		return ret
	}
	return o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddedTemplateCollection) GetItemOk() ([]TemplateCollection, bool) {
	if o == nil || o.Item == nil {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *EmbeddedTemplateCollection) HasItem() bool {
	if o != nil && o.Item != nil {
		return true
	}

	return false
}

// SetItem gets a reference to the given []TemplateCollection and assigns it to the Item field.
func (o *EmbeddedTemplateCollection) SetItem(v []TemplateCollection) {
	o.Item = v
}

func (o EmbeddedTemplateCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Item != nil {
		toSerialize["item"] = o.Item
	}
	return json.Marshal(toSerialize)
}

type NullableEmbeddedTemplateCollection struct {
	value *EmbeddedTemplateCollection
	isSet bool
}

func (v NullableEmbeddedTemplateCollection) Get() *EmbeddedTemplateCollection {
	return v.value
}

func (v *NullableEmbeddedTemplateCollection) Set(val *EmbeddedTemplateCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddedTemplateCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddedTemplateCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddedTemplateCollection(val *EmbeddedTemplateCollection) *NullableEmbeddedTemplateCollection {
	return &NullableEmbeddedTemplateCollection{value: val, isSet: true}
}

func (v NullableEmbeddedTemplateCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddedTemplateCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
