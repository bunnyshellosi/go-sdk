/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// EnvironmentKubeConfigKubeConfigRead An environment holds a collection of buildable and deployable components.
type EnvironmentKubeConfigKubeConfigRead struct {
	ApiVersion     *string                        `json:"apiVersion,omitempty"`
	Kind           *string                        `json:"kind,omitempty"`
	Preferences    map[string]interface{}         `json:"preferences,omitempty"`
	Clusters       []ClusterWrapperKubeConfigRead `json:"clusters,omitempty"`
	Users          []UserWrapperKubeConfigRead    `json:"users,omitempty"`
	Contexts       []ContextWrapperKubeConfigRead `json:"contexts,omitempty"`
	CurrentContext *string                        `json:"current-context,omitempty"`
}

// NewEnvironmentKubeConfigKubeConfigRead instantiates a new EnvironmentKubeConfigKubeConfigRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentKubeConfigKubeConfigRead() *EnvironmentKubeConfigKubeConfigRead {
	this := EnvironmentKubeConfigKubeConfigRead{}
	var apiVersion string = "v1"
	this.ApiVersion = &apiVersion
	var kind string = "Config"
	this.Kind = &kind
	return &this
}

// NewEnvironmentKubeConfigKubeConfigReadWithDefaults instantiates a new EnvironmentKubeConfigKubeConfigRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentKubeConfigKubeConfigReadWithDefaults() *EnvironmentKubeConfigKubeConfigRead {
	this := EnvironmentKubeConfigKubeConfigRead{}
	var apiVersion string = "v1"
	this.ApiVersion = &apiVersion
	var kind string = "Config"
	this.Kind = &kind
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *EnvironmentKubeConfigKubeConfigRead) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentKubeConfigKubeConfigRead) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *EnvironmentKubeConfigKubeConfigRead) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *EnvironmentKubeConfigKubeConfigRead) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *EnvironmentKubeConfigKubeConfigRead) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentKubeConfigKubeConfigRead) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *EnvironmentKubeConfigKubeConfigRead) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *EnvironmentKubeConfigKubeConfigRead) SetKind(v string) {
	o.Kind = &v
}

// GetPreferences returns the Preferences field value if set, zero value otherwise.
func (o *EnvironmentKubeConfigKubeConfigRead) GetPreferences() map[string]interface{} {
	if o == nil || o.Preferences == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Preferences
}

// GetPreferencesOk returns a tuple with the Preferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentKubeConfigKubeConfigRead) GetPreferencesOk() (map[string]interface{}, bool) {
	if o == nil || o.Preferences == nil {
		return nil, false
	}
	return o.Preferences, true
}

// HasPreferences returns a boolean if a field has been set.
func (o *EnvironmentKubeConfigKubeConfigRead) HasPreferences() bool {
	if o != nil && o.Preferences != nil {
		return true
	}

	return false
}

// SetPreferences gets a reference to the given map[string]interface{} and assigns it to the Preferences field.
func (o *EnvironmentKubeConfigKubeConfigRead) SetPreferences(v map[string]interface{}) {
	o.Preferences = v
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *EnvironmentKubeConfigKubeConfigRead) GetClusters() []ClusterWrapperKubeConfigRead {
	if o == nil || o.Clusters == nil {
		var ret []ClusterWrapperKubeConfigRead
		return ret
	}
	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentKubeConfigKubeConfigRead) GetClustersOk() ([]ClusterWrapperKubeConfigRead, bool) {
	if o == nil || o.Clusters == nil {
		return nil, false
	}
	return o.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *EnvironmentKubeConfigKubeConfigRead) HasClusters() bool {
	if o != nil && o.Clusters != nil {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []ClusterWrapperKubeConfigRead and assigns it to the Clusters field.
func (o *EnvironmentKubeConfigKubeConfigRead) SetClusters(v []ClusterWrapperKubeConfigRead) {
	o.Clusters = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *EnvironmentKubeConfigKubeConfigRead) GetUsers() []UserWrapperKubeConfigRead {
	if o == nil || o.Users == nil {
		var ret []UserWrapperKubeConfigRead
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentKubeConfigKubeConfigRead) GetUsersOk() ([]UserWrapperKubeConfigRead, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *EnvironmentKubeConfigKubeConfigRead) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []UserWrapperKubeConfigRead and assigns it to the Users field.
func (o *EnvironmentKubeConfigKubeConfigRead) SetUsers(v []UserWrapperKubeConfigRead) {
	o.Users = v
}

// GetContexts returns the Contexts field value if set, zero value otherwise.
func (o *EnvironmentKubeConfigKubeConfigRead) GetContexts() []ContextWrapperKubeConfigRead {
	if o == nil || o.Contexts == nil {
		var ret []ContextWrapperKubeConfigRead
		return ret
	}
	return o.Contexts
}

// GetContextsOk returns a tuple with the Contexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentKubeConfigKubeConfigRead) GetContextsOk() ([]ContextWrapperKubeConfigRead, bool) {
	if o == nil || o.Contexts == nil {
		return nil, false
	}
	return o.Contexts, true
}

// HasContexts returns a boolean if a field has been set.
func (o *EnvironmentKubeConfigKubeConfigRead) HasContexts() bool {
	if o != nil && o.Contexts != nil {
		return true
	}

	return false
}

// SetContexts gets a reference to the given []ContextWrapperKubeConfigRead and assigns it to the Contexts field.
func (o *EnvironmentKubeConfigKubeConfigRead) SetContexts(v []ContextWrapperKubeConfigRead) {
	o.Contexts = v
}

// GetCurrentContext returns the CurrentContext field value if set, zero value otherwise.
func (o *EnvironmentKubeConfigKubeConfigRead) GetCurrentContext() string {
	if o == nil || o.CurrentContext == nil {
		var ret string
		return ret
	}
	return *o.CurrentContext
}

// GetCurrentContextOk returns a tuple with the CurrentContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentKubeConfigKubeConfigRead) GetCurrentContextOk() (*string, bool) {
	if o == nil || o.CurrentContext == nil {
		return nil, false
	}
	return o.CurrentContext, true
}

// HasCurrentContext returns a boolean if a field has been set.
func (o *EnvironmentKubeConfigKubeConfigRead) HasCurrentContext() bool {
	if o != nil && o.CurrentContext != nil {
		return true
	}

	return false
}

// SetCurrentContext gets a reference to the given string and assigns it to the CurrentContext field.
func (o *EnvironmentKubeConfigKubeConfigRead) SetCurrentContext(v string) {
	o.CurrentContext = &v
}

func (o EnvironmentKubeConfigKubeConfigRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Preferences != nil {
		toSerialize["preferences"] = o.Preferences
	}
	if o.Clusters != nil {
		toSerialize["clusters"] = o.Clusters
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	if o.Contexts != nil {
		toSerialize["contexts"] = o.Contexts
	}
	if o.CurrentContext != nil {
		toSerialize["current-context"] = o.CurrentContext
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentKubeConfigKubeConfigRead struct {
	value *EnvironmentKubeConfigKubeConfigRead
	isSet bool
}

func (v NullableEnvironmentKubeConfigKubeConfigRead) Get() *EnvironmentKubeConfigKubeConfigRead {
	return v.value
}

func (v *NullableEnvironmentKubeConfigKubeConfigRead) Set(val *EnvironmentKubeConfigKubeConfigRead) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentKubeConfigKubeConfigRead) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentKubeConfigKubeConfigRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentKubeConfigKubeConfigRead(val *EnvironmentKubeConfigKubeConfigRead) *NullableEnvironmentKubeConfigKubeConfigRead {
	return &NullableEnvironmentKubeConfigKubeConfigRead{value: val, isSet: true}
}

func (v NullableEnvironmentKubeConfigKubeConfigRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentKubeConfigKubeConfigRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
