/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the FromTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FromTemplate{}

// FromTemplate struct for FromTemplate
type FromTemplate struct {
	Type     *string `json:"type,omitempty"`
	Template *string `json:"template,omitempty"`
}

// NewFromTemplate instantiates a new FromTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFromTemplate() *FromTemplate {
	this := FromTemplate{}
	var type_ string = "template"
	this.Type = &type_
	return &this
}

// NewFromTemplateWithDefaults instantiates a new FromTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFromTemplateWithDefaults() *FromTemplate {
	this := FromTemplate{}
	var type_ string = "template"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FromTemplate) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FromTemplate) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FromTemplate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FromTemplate) SetType(v string) {
	o.Type = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *FromTemplate) GetTemplate() string {
	if o == nil || IsNil(o.Template) {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FromTemplate) GetTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *FromTemplate) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *FromTemplate) SetTemplate(v string) {
	o.Template = &v
}

func (o FromTemplate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FromTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	return toSerialize, nil
}

type NullableFromTemplate struct {
	value *FromTemplate
	isSet bool
}

func (v NullableFromTemplate) Get() *FromTemplate {
	return v.value
}

func (v *NullableFromTemplate) Set(val *FromTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableFromTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableFromTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFromTemplate(val *FromTemplate) *NullableFromTemplate {
	return &NullableFromTemplate{value: val, isSet: true}
}

func (v NullableFromTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFromTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
