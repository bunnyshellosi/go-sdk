/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ComponentConfigItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentConfigItem{}

// ComponentConfigItem A service component represents either an application or a group of applications as a single unit
type ComponentConfigItem struct {
	Config *ComponentConfigItemConfig `json:"config,omitempty"`
}

// NewComponentConfigItem instantiates a new ComponentConfigItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentConfigItem() *ComponentConfigItem {
	this := ComponentConfigItem{}
	return &this
}

// NewComponentConfigItemWithDefaults instantiates a new ComponentConfigItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentConfigItemWithDefaults() *ComponentConfigItem {
	this := ComponentConfigItem{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ComponentConfigItem) GetConfig() ComponentConfigItemConfig {
	if o == nil || IsNil(o.Config) {
		var ret ComponentConfigItemConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentConfigItem) GetConfigOk() (*ComponentConfigItemConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ComponentConfigItem) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given ComponentConfigItemConfig and assigns it to the Config field.
func (o *ComponentConfigItem) SetConfig(v ComponentConfigItemConfig) {
	o.Config = &v
}

func (o ComponentConfigItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentConfigItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

type NullableComponentConfigItem struct {
	value *ComponentConfigItem
	isSet bool
}

func (v NullableComponentConfigItem) Get() *ComponentConfigItem {
	return v.value
}

func (v *NullableComponentConfigItem) Set(val *ComponentConfigItem) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentConfigItem) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentConfigItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentConfigItem(val *ComponentConfigItem) *NullableComponentConfigItem {
	return &NullableComponentConfigItem{value: val, isSet: true}
}

func (v NullableComponentConfigItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentConfigItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
