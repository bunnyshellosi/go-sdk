/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// EnvironmentEditSettings An environment holds a collection of buildable and deployable components.
type EnvironmentEditSettings struct {
	Name                     NullableString               `json:"name,omitempty"`
	RemoteDevelopmentAllowed NullableBool                 `json:"remoteDevelopmentAllowed,omitempty"`
	AutoUpdate               NullableBool                 `json:"autoUpdate,omitempty"`
	KubernetesIntegration    NullableString               `json:"kubernetesIntegration,omitempty"`
	Edit                     *EnvironmentEditSettingsEdit `json:"edit,omitempty"`
}

// NewEnvironmentEditSettings instantiates a new EnvironmentEditSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentEditSettings() *EnvironmentEditSettings {
	this := EnvironmentEditSettings{}
	return &this
}

// NewEnvironmentEditSettingsWithDefaults instantiates a new EnvironmentEditSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentEditSettingsWithDefaults() *EnvironmentEditSettings {
	this := EnvironmentEditSettings{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentEditSettings) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentEditSettings) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *EnvironmentEditSettings) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *EnvironmentEditSettings) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *EnvironmentEditSettings) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *EnvironmentEditSettings) UnsetName() {
	o.Name.Unset()
}

// GetRemoteDevelopmentAllowed returns the RemoteDevelopmentAllowed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentEditSettings) GetRemoteDevelopmentAllowed() bool {
	if o == nil || o.RemoteDevelopmentAllowed.Get() == nil {
		var ret bool
		return ret
	}
	return *o.RemoteDevelopmentAllowed.Get()
}

// GetRemoteDevelopmentAllowedOk returns a tuple with the RemoteDevelopmentAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentEditSettings) GetRemoteDevelopmentAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoteDevelopmentAllowed.Get(), o.RemoteDevelopmentAllowed.IsSet()
}

// HasRemoteDevelopmentAllowed returns a boolean if a field has been set.
func (o *EnvironmentEditSettings) HasRemoteDevelopmentAllowed() bool {
	if o != nil && o.RemoteDevelopmentAllowed.IsSet() {
		return true
	}

	return false
}

// SetRemoteDevelopmentAllowed gets a reference to the given NullableBool and assigns it to the RemoteDevelopmentAllowed field.
func (o *EnvironmentEditSettings) SetRemoteDevelopmentAllowed(v bool) {
	o.RemoteDevelopmentAllowed.Set(&v)
}

// SetRemoteDevelopmentAllowedNil sets the value for RemoteDevelopmentAllowed to be an explicit nil
func (o *EnvironmentEditSettings) SetRemoteDevelopmentAllowedNil() {
	o.RemoteDevelopmentAllowed.Set(nil)
}

// UnsetRemoteDevelopmentAllowed ensures that no value is present for RemoteDevelopmentAllowed, not even an explicit nil
func (o *EnvironmentEditSettings) UnsetRemoteDevelopmentAllowed() {
	o.RemoteDevelopmentAllowed.Unset()
}

// GetAutoUpdate returns the AutoUpdate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentEditSettings) GetAutoUpdate() bool {
	if o == nil || o.AutoUpdate.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AutoUpdate.Get()
}

// GetAutoUpdateOk returns a tuple with the AutoUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentEditSettings) GetAutoUpdateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoUpdate.Get(), o.AutoUpdate.IsSet()
}

// HasAutoUpdate returns a boolean if a field has been set.
func (o *EnvironmentEditSettings) HasAutoUpdate() bool {
	if o != nil && o.AutoUpdate.IsSet() {
		return true
	}

	return false
}

// SetAutoUpdate gets a reference to the given NullableBool and assigns it to the AutoUpdate field.
func (o *EnvironmentEditSettings) SetAutoUpdate(v bool) {
	o.AutoUpdate.Set(&v)
}

// SetAutoUpdateNil sets the value for AutoUpdate to be an explicit nil
func (o *EnvironmentEditSettings) SetAutoUpdateNil() {
	o.AutoUpdate.Set(nil)
}

// UnsetAutoUpdate ensures that no value is present for AutoUpdate, not even an explicit nil
func (o *EnvironmentEditSettings) UnsetAutoUpdate() {
	o.AutoUpdate.Unset()
}

// GetKubernetesIntegration returns the KubernetesIntegration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentEditSettings) GetKubernetesIntegration() string {
	if o == nil || o.KubernetesIntegration.Get() == nil {
		var ret string
		return ret
	}
	return *o.KubernetesIntegration.Get()
}

// GetKubernetesIntegrationOk returns a tuple with the KubernetesIntegration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentEditSettings) GetKubernetesIntegrationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KubernetesIntegration.Get(), o.KubernetesIntegration.IsSet()
}

// HasKubernetesIntegration returns a boolean if a field has been set.
func (o *EnvironmentEditSettings) HasKubernetesIntegration() bool {
	if o != nil && o.KubernetesIntegration.IsSet() {
		return true
	}

	return false
}

// SetKubernetesIntegration gets a reference to the given NullableString and assigns it to the KubernetesIntegration field.
func (o *EnvironmentEditSettings) SetKubernetesIntegration(v string) {
	o.KubernetesIntegration.Set(&v)
}

// SetKubernetesIntegrationNil sets the value for KubernetesIntegration to be an explicit nil
func (o *EnvironmentEditSettings) SetKubernetesIntegrationNil() {
	o.KubernetesIntegration.Set(nil)
}

// UnsetKubernetesIntegration ensures that no value is present for KubernetesIntegration, not even an explicit nil
func (o *EnvironmentEditSettings) UnsetKubernetesIntegration() {
	o.KubernetesIntegration.Unset()
}

// GetEdit returns the Edit field value if set, zero value otherwise.
func (o *EnvironmentEditSettings) GetEdit() EnvironmentEditSettingsEdit {
	if o == nil || o.Edit == nil {
		var ret EnvironmentEditSettingsEdit
		return ret
	}
	return *o.Edit
}

// GetEditOk returns a tuple with the Edit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentEditSettings) GetEditOk() (*EnvironmentEditSettingsEdit, bool) {
	if o == nil || o.Edit == nil {
		return nil, false
	}
	return o.Edit, true
}

// HasEdit returns a boolean if a field has been set.
func (o *EnvironmentEditSettings) HasEdit() bool {
	if o != nil && o.Edit != nil {
		return true
	}

	return false
}

// SetEdit gets a reference to the given EnvironmentEditSettingsEdit and assigns it to the Edit field.
func (o *EnvironmentEditSettings) SetEdit(v EnvironmentEditSettingsEdit) {
	o.Edit = &v
}

func (o EnvironmentEditSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.RemoteDevelopmentAllowed.IsSet() {
		toSerialize["remoteDevelopmentAllowed"] = o.RemoteDevelopmentAllowed.Get()
	}
	if o.AutoUpdate.IsSet() {
		toSerialize["autoUpdate"] = o.AutoUpdate.Get()
	}
	if o.KubernetesIntegration.IsSet() {
		toSerialize["kubernetesIntegration"] = o.KubernetesIntegration.Get()
	}
	if o.Edit != nil {
		toSerialize["edit"] = o.Edit
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentEditSettings struct {
	value *EnvironmentEditSettings
	isSet bool
}

func (v NullableEnvironmentEditSettings) Get() *EnvironmentEditSettings {
	return v.value
}

func (v *NullableEnvironmentEditSettings) Set(val *EnvironmentEditSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentEditSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentEditSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentEditSettings(val *EnvironmentEditSettings) *NullableEnvironmentEditSettings {
	return &NullableEnvironmentEditSettings{value: val, isSet: true}
}

func (v NullableEnvironmentEditSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentEditSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
