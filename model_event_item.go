/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
)

// checks if the EventItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventItem{}

// EventItem An event represents an operation on an environment, integration or settings
type EventItem struct {
	// Event identifier.
	Id *string `json:"id,omitempty"`
	// Event type.
	Type *string `json:"type,omitempty"`
	// Event operation status.
	Status *string `json:"status,omitempty"`
	// Environment identifier.
	Environment NullableString `json:"environment,omitempty"`
	// Organization identifier.
	Organization *string `json:"organization,omitempty"`
	// Event creation time.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Event last update time.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Event identifier.
	Delegated NullableString `json:"delegated,omitempty"`
}

// NewEventItem instantiates a new EventItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventItem() *EventItem {
	this := EventItem{}
	return &this
}

// NewEventItemWithDefaults instantiates a new EventItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventItemWithDefaults() *EventItem {
	this := EventItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EventItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EventItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EventItem) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventItem) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItem) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventItem) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventItem) SetType(v string) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EventItem) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItem) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EventItem) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EventItem) SetStatus(v string) {
	o.Status = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventItem) GetEnvironment() string {
	if o == nil || IsNil(o.Environment.Get()) {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventItem) GetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *EventItem) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *EventItem) SetEnvironment(v string) {
	o.Environment.Set(&v)
}

// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *EventItem) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *EventItem) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *EventItem) GetOrganization() string {
	if o == nil || IsNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItem) GetOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *EventItem) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *EventItem) SetOrganization(v string) {
	o.Organization = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *EventItem) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItem) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *EventItem) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *EventItem) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *EventItem) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItem) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *EventItem) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *EventItem) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetDelegated returns the Delegated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventItem) GetDelegated() string {
	if o == nil || IsNil(o.Delegated.Get()) {
		var ret string
		return ret
	}
	return *o.Delegated.Get()
}

// GetDelegatedOk returns a tuple with the Delegated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventItem) GetDelegatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Delegated.Get(), o.Delegated.IsSet()
}

// HasDelegated returns a boolean if a field has been set.
func (o *EventItem) HasDelegated() bool {
	if o != nil && o.Delegated.IsSet() {
		return true
	}

	return false
}

// SetDelegated gets a reference to the given NullableString and assigns it to the Delegated field.
func (o *EventItem) SetDelegated(v string) {
	o.Delegated.Set(&v)
}

// SetDelegatedNil sets the value for Delegated to be an explicit nil
func (o *EventItem) SetDelegatedNil() {
	o.Delegated.Set(nil)
}

// UnsetDelegated ensures that no value is present for Delegated, not even an explicit nil
func (o *EventItem) UnsetDelegated() {
	o.Delegated.Unset()
}

func (o EventItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.Delegated.IsSet() {
		toSerialize["delegated"] = o.Delegated.Get()
	}
	return toSerialize, nil
}

type NullableEventItem struct {
	value *EventItem
	isSet bool
}

func (v NullableEventItem) Get() *EventItem {
	return v.value
}

func (v *NullableEventItem) Set(val *EventItem) {
	v.value = val
	v.isSet = true
}

func (v NullableEventItem) IsSet() bool {
	return v.isSet
}

func (v *NullableEventItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventItem(val *EventItem) *NullableEventItem {
	return &NullableEventItem{value: val, isSet: true}
}

func (v NullableEventItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
