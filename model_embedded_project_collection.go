/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the EmbeddedProjectCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddedProjectCollection{}

// EmbeddedProjectCollection struct for EmbeddedProjectCollection
type EmbeddedProjectCollection struct {
	Item []ProjectCollection `json:"item,omitempty"`
}

// NewEmbeddedProjectCollection instantiates a new EmbeddedProjectCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddedProjectCollection() *EmbeddedProjectCollection {
	this := EmbeddedProjectCollection{}
	return &this
}

// NewEmbeddedProjectCollectionWithDefaults instantiates a new EmbeddedProjectCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddedProjectCollectionWithDefaults() *EmbeddedProjectCollection {
	this := EmbeddedProjectCollection{}
	return &this
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *EmbeddedProjectCollection) GetItem() []ProjectCollection {
	if o == nil || IsNil(o.Item) {
		var ret []ProjectCollection
		return ret
	}
	return o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddedProjectCollection) GetItemOk() ([]ProjectCollection, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *EmbeddedProjectCollection) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given []ProjectCollection and assigns it to the Item field.
func (o *EmbeddedProjectCollection) SetItem(v []ProjectCollection) {
	o.Item = v
}

func (o EmbeddedProjectCollection) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddedProjectCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	return toSerialize, nil
}

type NullableEmbeddedProjectCollection struct {
	value *EmbeddedProjectCollection
	isSet bool
}

func (v NullableEmbeddedProjectCollection) Get() *EmbeddedProjectCollection {
	return v.value
}

func (v *NullableEmbeddedProjectCollection) Set(val *EmbeddedProjectCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddedProjectCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddedProjectCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddedProjectCollection(val *EmbeddedProjectCollection) *NullableEmbeddedProjectCollection {
	return &NullableEmbeddedProjectCollection{value: val, isSet: true}
}

func (v NullableEmbeddedProjectCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddedProjectCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
