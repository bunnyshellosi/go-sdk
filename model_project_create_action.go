/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ProjectCreateAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectCreateAction{}

// ProjectCreateAction A project holds multiple environments and shared secrets and settings.
type ProjectCreateAction struct {
	Name         string             `json:"name"`
	Organization string             `json:"organization"`
	Labels       *map[string]string `json:"labels,omitempty"`
}

// NewProjectCreateAction instantiates a new ProjectCreateAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectCreateAction(name string, organization string) *ProjectCreateAction {
	this := ProjectCreateAction{}
	this.Name = name
	this.Organization = organization
	return &this
}

// NewProjectCreateActionWithDefaults instantiates a new ProjectCreateAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectCreateActionWithDefaults() *ProjectCreateAction {
	this := ProjectCreateAction{}
	return &this
}

// GetName returns the Name field value
func (o *ProjectCreateAction) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectCreateAction) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectCreateAction) SetName(v string) {
	o.Name = v
}

// GetOrganization returns the Organization field value
func (o *ProjectCreateAction) GetOrganization() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
func (o *ProjectCreateAction) GetOrganizationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Organization, true
}

// SetOrganization sets field value
func (o *ProjectCreateAction) SetOrganization(v string) {
	o.Organization = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ProjectCreateAction) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCreateAction) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ProjectCreateAction) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *ProjectCreateAction) SetLabels(v map[string]string) {
	o.Labels = &v
}

func (o ProjectCreateAction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectCreateAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["organization"] = o.Organization
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

type NullableProjectCreateAction struct {
	value *ProjectCreateAction
	isSet bool
}

func (v NullableProjectCreateAction) Get() *ProjectCreateAction {
	return v.value
}

func (v *NullableProjectCreateAction) Set(val *ProjectCreateAction) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectCreateAction) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectCreateAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectCreateAction(val *ProjectCreateAction) *NullableProjectCreateAction {
	return &NullableProjectCreateAction{value: val, isSet: true}
}

func (v NullableProjectCreateAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectCreateAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
