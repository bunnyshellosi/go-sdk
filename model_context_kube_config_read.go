/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: api+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// ContextKubeConfigRead struct for ContextKubeConfigRead
type ContextKubeConfigRead struct {
	Cluster   string `json:"cluster"`
	Namespace string `json:"namespace"`
	User      string `json:"user"`
}

// NewContextKubeConfigRead instantiates a new ContextKubeConfigRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContextKubeConfigRead(cluster string, namespace string, user string) *ContextKubeConfigRead {
	this := ContextKubeConfigRead{}
	this.Cluster = cluster
	this.Namespace = namespace
	this.User = user
	return &this
}

// NewContextKubeConfigReadWithDefaults instantiates a new ContextKubeConfigRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextKubeConfigReadWithDefaults() *ContextKubeConfigRead {
	this := ContextKubeConfigRead{}
	return &this
}

// GetCluster returns the Cluster field value
func (o *ContextKubeConfigRead) GetCluster() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *ContextKubeConfigRead) GetClusterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *ContextKubeConfigRead) SetCluster(v string) {
	o.Cluster = v
}

// GetNamespace returns the Namespace field value
func (o *ContextKubeConfigRead) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *ContextKubeConfigRead) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *ContextKubeConfigRead) SetNamespace(v string) {
	o.Namespace = v
}

// GetUser returns the User field value
func (o *ContextKubeConfigRead) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *ContextKubeConfigRead) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *ContextKubeConfigRead) SetUser(v string) {
	o.User = v
}

func (o ContextKubeConfigRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cluster"] = o.Cluster
	}
	if true {
		toSerialize["namespace"] = o.Namespace
	}
	if true {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableContextKubeConfigRead struct {
	value *ContextKubeConfigRead
	isSet bool
}

func (v NullableContextKubeConfigRead) Get() *ContextKubeConfigRead {
	return v.value
}

func (v *NullableContextKubeConfigRead) Set(val *ContextKubeConfigRead) {
	v.value = val
	v.isSet = true
}

func (v NullableContextKubeConfigRead) IsSet() bool {
	return v.isSet
}

func (v *NullableContextKubeConfigRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextKubeConfigRead(val *ContextKubeConfigRead) *NullableContextKubeConfigRead {
	return &NullableContextKubeConfigRead{value: val, isSet: true}
}

func (v NullableContextKubeConfigRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextKubeConfigRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
