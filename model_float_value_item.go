/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the FloatValueItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FloatValueItem{}

// FloatValueItem struct for FloatValueItem
type FloatValueItem struct {
	Value *float32 `json:"value,omitempty"`
	Type  *string  `json:"type,omitempty"`
}

// NewFloatValueItem instantiates a new FloatValueItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFloatValueItem() *FloatValueItem {
	this := FloatValueItem{}
	return &this
}

// NewFloatValueItemWithDefaults instantiates a new FloatValueItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFloatValueItemWithDefaults() *FloatValueItem {
	this := FloatValueItem{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *FloatValueItem) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloatValueItem) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *FloatValueItem) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *FloatValueItem) SetValue(v float32) {
	o.Value = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FloatValueItem) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloatValueItem) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FloatValueItem) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FloatValueItem) SetType(v string) {
	o.Type = &v
}

func (o FloatValueItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FloatValueItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableFloatValueItem struct {
	value *FloatValueItem
	isSet bool
}

func (v NullableFloatValueItem) Get() *FloatValueItem {
	return v.value
}

func (v *NullableFloatValueItem) Set(val *FloatValueItem) {
	v.value = val
	v.isSet = true
}

func (v NullableFloatValueItem) IsSet() bool {
	return v.isSet
}

func (v *NullableFloatValueItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFloatValueItem(val *FloatValueItem) *NullableFloatValueItem {
	return &NullableFloatValueItem{value: val, isSet: true}
}

func (v NullableFloatValueItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFloatValueItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
