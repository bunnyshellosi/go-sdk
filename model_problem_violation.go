/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// ProblemViolation A validation error
type ProblemViolation struct {
	PropertyPath *string `json:"propertyPath,omitempty"`
	Message      *string `json:"message,omitempty"`
}

// NewProblemViolation instantiates a new ProblemViolation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemViolation() *ProblemViolation {
	this := ProblemViolation{}
	return &this
}

// NewProblemViolationWithDefaults instantiates a new ProblemViolation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemViolationWithDefaults() *ProblemViolation {
	this := ProblemViolation{}
	return &this
}

// GetPropertyPath returns the PropertyPath field value if set, zero value otherwise.
func (o *ProblemViolation) GetPropertyPath() string {
	if o == nil || o.PropertyPath == nil {
		var ret string
		return ret
	}
	return *o.PropertyPath
}

// GetPropertyPathOk returns a tuple with the PropertyPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemViolation) GetPropertyPathOk() (*string, bool) {
	if o == nil || o.PropertyPath == nil {
		return nil, false
	}
	return o.PropertyPath, true
}

// HasPropertyPath returns a boolean if a field has been set.
func (o *ProblemViolation) HasPropertyPath() bool {
	if o != nil && o.PropertyPath != nil {
		return true
	}

	return false
}

// SetPropertyPath gets a reference to the given string and assigns it to the PropertyPath field.
func (o *ProblemViolation) SetPropertyPath(v string) {
	o.PropertyPath = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ProblemViolation) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemViolation) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ProblemViolation) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ProblemViolation) SetMessage(v string) {
	o.Message = &v
}

func (o ProblemViolation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PropertyPath != nil {
		toSerialize["propertyPath"] = o.PropertyPath
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableProblemViolation struct {
	value *ProblemViolation
	isSet bool
}

func (v NullableProblemViolation) Get() *ProblemViolation {
	return v.value
}

func (v *NullableProblemViolation) Set(val *ProblemViolation) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemViolation) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemViolation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemViolation(val *ProblemViolation) *NullableProblemViolation {
	return &NullableProblemViolation{value: val, isSet: true}
}

func (v NullableProblemViolation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemViolation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
