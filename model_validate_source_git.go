/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ValidateSourceGit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidateSourceGit{}

// ValidateSourceGit struct for ValidateSourceGit
type ValidateSourceGit struct {
	Type               *string `json:"type,omitempty"`
	Url                string  `json:"url"`
	Ref                string  `json:"ref"`
	DirPath            string  `json:"dirPath"`
	OrganizationId     string  `json:"organizationId"`
	ValidateComponents *bool   `json:"validateComponents,omitempty"`
}

// NewValidateSourceGit instantiates a new ValidateSourceGit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateSourceGit(url string, ref string, dirPath string, organizationId string) *ValidateSourceGit {
	this := ValidateSourceGit{}
	var type_ string = "git"
	this.Type = &type_
	this.Url = url
	this.Ref = ref
	this.DirPath = dirPath
	this.OrganizationId = organizationId
	return &this
}

// NewValidateSourceGitWithDefaults instantiates a new ValidateSourceGit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateSourceGitWithDefaults() *ValidateSourceGit {
	this := ValidateSourceGit{}
	var type_ string = "git"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ValidateSourceGit) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateSourceGit) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ValidateSourceGit) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ValidateSourceGit) SetType(v string) {
	o.Type = &v
}

// GetUrl returns the Url field value
func (o *ValidateSourceGit) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ValidateSourceGit) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ValidateSourceGit) SetUrl(v string) {
	o.Url = v
}

// GetRef returns the Ref field value
func (o *ValidateSourceGit) GetRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ref
}

// GetRefOk returns a tuple with the Ref field value
// and a boolean to check if the value has been set.
func (o *ValidateSourceGit) GetRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ref, true
}

// SetRef sets field value
func (o *ValidateSourceGit) SetRef(v string) {
	o.Ref = v
}

// GetDirPath returns the DirPath field value
func (o *ValidateSourceGit) GetDirPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DirPath
}

// GetDirPathOk returns a tuple with the DirPath field value
// and a boolean to check if the value has been set.
func (o *ValidateSourceGit) GetDirPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DirPath, true
}

// SetDirPath sets field value
func (o *ValidateSourceGit) SetDirPath(v string) {
	o.DirPath = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *ValidateSourceGit) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *ValidateSourceGit) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *ValidateSourceGit) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetValidateComponents returns the ValidateComponents field value if set, zero value otherwise.
func (o *ValidateSourceGit) GetValidateComponents() bool {
	if o == nil || IsNil(o.ValidateComponents) {
		var ret bool
		return ret
	}
	return *o.ValidateComponents
}

// GetValidateComponentsOk returns a tuple with the ValidateComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateSourceGit) GetValidateComponentsOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateComponents) {
		return nil, false
	}
	return o.ValidateComponents, true
}

// HasValidateComponents returns a boolean if a field has been set.
func (o *ValidateSourceGit) HasValidateComponents() bool {
	if o != nil && !IsNil(o.ValidateComponents) {
		return true
	}

	return false
}

// SetValidateComponents gets a reference to the given bool and assigns it to the ValidateComponents field.
func (o *ValidateSourceGit) SetValidateComponents(v bool) {
	o.ValidateComponents = &v
}

func (o ValidateSourceGit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidateSourceGit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["url"] = o.Url
	toSerialize["ref"] = o.Ref
	toSerialize["dirPath"] = o.DirPath
	toSerialize["organizationId"] = o.OrganizationId
	if !IsNil(o.ValidateComponents) {
		toSerialize["validateComponents"] = o.ValidateComponents
	}
	return toSerialize, nil
}

type NullableValidateSourceGit struct {
	value *ValidateSourceGit
	isSet bool
}

func (v NullableValidateSourceGit) Get() *ValidateSourceGit {
	return v.value
}

func (v *NullableValidateSourceGit) Set(val *ValidateSourceGit) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateSourceGit) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateSourceGit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateSourceGit(val *ValidateSourceGit) *NullableValidateSourceGit {
	return &NullableValidateSourceGit{value: val, isSet: true}
}

func (v NullableValidateSourceGit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateSourceGit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
