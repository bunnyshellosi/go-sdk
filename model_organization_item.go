/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.0.1
Contact: api+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// OrganizationItem An organization holds multiple projects and all the integrations used by environments
type OrganizationItem struct {
	// Organization identifier.
	Id *string `json:"id,omitempty"`
	// Organization name as defined in Bunnyshell UI.
	Name *string `json:"name,omitempty"`
	// Organization timezone as defined in Bunnyshell UI.
	Timezone *string `json:"timezone,omitempty"`
	// Organization total users.
	TotalUsers *int32 `json:"totalUsers,omitempty"`
	// Organization total projects.
	TotalProjects *int32 `json:"totalProjects,omitempty"`
	// Organization total available registry integrations.
	AvailableRegistries *int32 `json:"availableRegistries,omitempty"`
	// Organization total available cluster integrations.
	AvailableClusters *int32 `json:"availableClusters,omitempty"`
	// Organization total available git integrations.
	AvailableGitIntegration *int32 `json:"availableGitIntegration,omitempty"`
}

// NewOrganizationItem instantiates a new OrganizationItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationItem() *OrganizationItem {
	this := OrganizationItem{}
	return &this
}

// NewOrganizationItemWithDefaults instantiates a new OrganizationItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationItemWithDefaults() *OrganizationItem {
	this := OrganizationItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrganizationItem) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationItem) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrganizationItem) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrganizationItem) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrganizationItem) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationItem) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrganizationItem) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrganizationItem) SetName(v string) {
	o.Name = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *OrganizationItem) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationItem) GetTimezoneOk() (*string, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *OrganizationItem) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *OrganizationItem) SetTimezone(v string) {
	o.Timezone = &v
}

// GetTotalUsers returns the TotalUsers field value if set, zero value otherwise.
func (o *OrganizationItem) GetTotalUsers() int32 {
	if o == nil || o.TotalUsers == nil {
		var ret int32
		return ret
	}
	return *o.TotalUsers
}

// GetTotalUsersOk returns a tuple with the TotalUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationItem) GetTotalUsersOk() (*int32, bool) {
	if o == nil || o.TotalUsers == nil {
		return nil, false
	}
	return o.TotalUsers, true
}

// HasTotalUsers returns a boolean if a field has been set.
func (o *OrganizationItem) HasTotalUsers() bool {
	if o != nil && o.TotalUsers != nil {
		return true
	}

	return false
}

// SetTotalUsers gets a reference to the given int32 and assigns it to the TotalUsers field.
func (o *OrganizationItem) SetTotalUsers(v int32) {
	o.TotalUsers = &v
}

// GetTotalProjects returns the TotalProjects field value if set, zero value otherwise.
func (o *OrganizationItem) GetTotalProjects() int32 {
	if o == nil || o.TotalProjects == nil {
		var ret int32
		return ret
	}
	return *o.TotalProjects
}

// GetTotalProjectsOk returns a tuple with the TotalProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationItem) GetTotalProjectsOk() (*int32, bool) {
	if o == nil || o.TotalProjects == nil {
		return nil, false
	}
	return o.TotalProjects, true
}

// HasTotalProjects returns a boolean if a field has been set.
func (o *OrganizationItem) HasTotalProjects() bool {
	if o != nil && o.TotalProjects != nil {
		return true
	}

	return false
}

// SetTotalProjects gets a reference to the given int32 and assigns it to the TotalProjects field.
func (o *OrganizationItem) SetTotalProjects(v int32) {
	o.TotalProjects = &v
}

// GetAvailableRegistries returns the AvailableRegistries field value if set, zero value otherwise.
func (o *OrganizationItem) GetAvailableRegistries() int32 {
	if o == nil || o.AvailableRegistries == nil {
		var ret int32
		return ret
	}
	return *o.AvailableRegistries
}

// GetAvailableRegistriesOk returns a tuple with the AvailableRegistries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationItem) GetAvailableRegistriesOk() (*int32, bool) {
	if o == nil || o.AvailableRegistries == nil {
		return nil, false
	}
	return o.AvailableRegistries, true
}

// HasAvailableRegistries returns a boolean if a field has been set.
func (o *OrganizationItem) HasAvailableRegistries() bool {
	if o != nil && o.AvailableRegistries != nil {
		return true
	}

	return false
}

// SetAvailableRegistries gets a reference to the given int32 and assigns it to the AvailableRegistries field.
func (o *OrganizationItem) SetAvailableRegistries(v int32) {
	o.AvailableRegistries = &v
}

// GetAvailableClusters returns the AvailableClusters field value if set, zero value otherwise.
func (o *OrganizationItem) GetAvailableClusters() int32 {
	if o == nil || o.AvailableClusters == nil {
		var ret int32
		return ret
	}
	return *o.AvailableClusters
}

// GetAvailableClustersOk returns a tuple with the AvailableClusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationItem) GetAvailableClustersOk() (*int32, bool) {
	if o == nil || o.AvailableClusters == nil {
		return nil, false
	}
	return o.AvailableClusters, true
}

// HasAvailableClusters returns a boolean if a field has been set.
func (o *OrganizationItem) HasAvailableClusters() bool {
	if o != nil && o.AvailableClusters != nil {
		return true
	}

	return false
}

// SetAvailableClusters gets a reference to the given int32 and assigns it to the AvailableClusters field.
func (o *OrganizationItem) SetAvailableClusters(v int32) {
	o.AvailableClusters = &v
}

// GetAvailableGitIntegration returns the AvailableGitIntegration field value if set, zero value otherwise.
func (o *OrganizationItem) GetAvailableGitIntegration() int32 {
	if o == nil || o.AvailableGitIntegration == nil {
		var ret int32
		return ret
	}
	return *o.AvailableGitIntegration
}

// GetAvailableGitIntegrationOk returns a tuple with the AvailableGitIntegration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationItem) GetAvailableGitIntegrationOk() (*int32, bool) {
	if o == nil || o.AvailableGitIntegration == nil {
		return nil, false
	}
	return o.AvailableGitIntegration, true
}

// HasAvailableGitIntegration returns a boolean if a field has been set.
func (o *OrganizationItem) HasAvailableGitIntegration() bool {
	if o != nil && o.AvailableGitIntegration != nil {
		return true
	}

	return false
}

// SetAvailableGitIntegration gets a reference to the given int32 and assigns it to the AvailableGitIntegration field.
func (o *OrganizationItem) SetAvailableGitIntegration(v int32) {
	o.AvailableGitIntegration = &v
}

func (o OrganizationItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	if o.TotalUsers != nil {
		toSerialize["totalUsers"] = o.TotalUsers
	}
	if o.TotalProjects != nil {
		toSerialize["totalProjects"] = o.TotalProjects
	}
	if o.AvailableRegistries != nil {
		toSerialize["availableRegistries"] = o.AvailableRegistries
	}
	if o.AvailableClusters != nil {
		toSerialize["availableClusters"] = o.AvailableClusters
	}
	if o.AvailableGitIntegration != nil {
		toSerialize["availableGitIntegration"] = o.AvailableGitIntegration
	}
	return json.Marshal(toSerialize)
}

type NullableOrganizationItem struct {
	value *OrganizationItem
	isSet bool
}

func (v NullableOrganizationItem) Get() *OrganizationItem {
	return v.value
}

func (v *NullableOrganizationItem) Set(val *OrganizationItem) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationItem) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationItem(val *OrganizationItem) *NullableOrganizationItem {
	return &NullableOrganizationItem{value: val, isSet: true}
}

func (v NullableOrganizationItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
