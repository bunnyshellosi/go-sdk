/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ResourceRequirementItemLimits The maximum resources for the container.
type ResourceRequirementItemLimits struct {
	ResourceListItem *ResourceListItem
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ResourceRequirementItemLimits) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into ResourceListItem
	err = json.Unmarshal(data, &dst.ResourceListItem)
	if err == nil {
		jsonResourceListItem, _ := json.Marshal(dst.ResourceListItem)
		if string(jsonResourceListItem) == "{}" { // empty struct
			dst.ResourceListItem = nil
		} else {
			return nil // data stored in dst.ResourceListItem, return on the first match
		}
	} else {
		dst.ResourceListItem = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(ResourceRequirementItemLimits)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ResourceRequirementItemLimits) MarshalJSON() ([]byte, error) {
	if src.ResourceListItem != nil {
		return json.Marshal(&src.ResourceListItem)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableResourceRequirementItemLimits struct {
	value *ResourceRequirementItemLimits
	isSet bool
}

func (v NullableResourceRequirementItemLimits) Get() *ResourceRequirementItemLimits {
	return v.value
}

func (v *NullableResourceRequirementItemLimits) Set(val *ResourceRequirementItemLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceRequirementItemLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceRequirementItemLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceRequirementItemLimits(val *ResourceRequirementItemLimits) *NullableResourceRequirementItemLimits {
	return &NullableResourceRequirementItemLimits{value: val, isSet: true}
}

func (v NullableResourceRequirementItemLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceRequirementItemLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
