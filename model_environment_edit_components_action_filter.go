/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// EnvironmentEditComponentsActionFilter - struct for EnvironmentEditComponentsActionFilter
type EnvironmentEditComponentsActionFilter struct {
	FilterGit  *FilterGit
	FilterName *FilterName
}

// FilterGitAsEnvironmentEditComponentsActionFilter is a convenience function that returns FilterGit wrapped in EnvironmentEditComponentsActionFilter
func FilterGitAsEnvironmentEditComponentsActionFilter(v *FilterGit) EnvironmentEditComponentsActionFilter {
	return EnvironmentEditComponentsActionFilter{
		FilterGit: v,
	}
}

// FilterNameAsEnvironmentEditComponentsActionFilter is a convenience function that returns FilterName wrapped in EnvironmentEditComponentsActionFilter
func FilterNameAsEnvironmentEditComponentsActionFilter(v *FilterName) EnvironmentEditComponentsActionFilter {
	return EnvironmentEditComponentsActionFilter{
		FilterName: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *EnvironmentEditComponentsActionFilter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FilterGit
	err = json.Unmarshal(data, &dst.FilterGit)
	if err == nil {
		jsonFilterGit, _ := json.Marshal(dst.FilterGit)
		if string(jsonFilterGit) == "{}" { // empty struct
			dst.FilterGit = nil
		} else {
			match++
		}
	} else {
		dst.FilterGit = nil
	}

	// try to unmarshal data into FilterName
	err = json.Unmarshal(data, &dst.FilterName)
	if err == nil {
		jsonFilterName, _ := json.Marshal(dst.FilterName)
		if string(jsonFilterName) == "{}" { // empty struct
			dst.FilterName = nil
		} else {
			match++
		}
	} else {
		dst.FilterName = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FilterGit = nil
		dst.FilterName = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EnvironmentEditComponentsActionFilter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EnvironmentEditComponentsActionFilter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EnvironmentEditComponentsActionFilter) MarshalJSON() ([]byte, error) {
	if src.FilterGit != nil {
		return json.Marshal(&src.FilterGit)
	}

	if src.FilterName != nil {
		return json.Marshal(&src.FilterName)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EnvironmentEditComponentsActionFilter) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FilterGit != nil {
		return obj.FilterGit
	}

	if obj.FilterName != nil {
		return obj.FilterName
	}

	// all schemas are nil
	return nil
}

type NullableEnvironmentEditComponentsActionFilter struct {
	value *EnvironmentEditComponentsActionFilter
	isSet bool
}

func (v NullableEnvironmentEditComponentsActionFilter) Get() *EnvironmentEditComponentsActionFilter {
	return v.value
}

func (v *NullableEnvironmentEditComponentsActionFilter) Set(val *EnvironmentEditComponentsActionFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentEditComponentsActionFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentEditComponentsActionFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentEditComponentsActionFilter(val *EnvironmentEditComponentsActionFilter) *NullableEnvironmentEditComponentsActionFilter {
	return &NullableEnvironmentEditComponentsActionFilter{value: val, isSet: true}
}

func (v NullableEnvironmentEditComponentsActionFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentEditComponentsActionFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
