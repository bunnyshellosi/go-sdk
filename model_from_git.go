/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the FromGit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FromGit{}

// FromGit struct for FromGit
type FromGit struct {
	Type     *string `json:"type,omitempty"`
	Url      *string `json:"url,omitempty"`
	Branch   *string `json:"branch,omitempty"`
	YamlPath *string `json:"yamlPath,omitempty"`
}

// NewFromGit instantiates a new FromGit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFromGit() *FromGit {
	this := FromGit{}
	var type_ string = "git"
	this.Type = &type_
	return &this
}

// NewFromGitWithDefaults instantiates a new FromGit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFromGitWithDefaults() *FromGit {
	this := FromGit{}
	var type_ string = "git"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FromGit) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FromGit) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FromGit) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FromGit) SetType(v string) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *FromGit) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FromGit) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *FromGit) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *FromGit) SetUrl(v string) {
	o.Url = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *FromGit) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FromGit) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *FromGit) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *FromGit) SetBranch(v string) {
	o.Branch = &v
}

// GetYamlPath returns the YamlPath field value if set, zero value otherwise.
func (o *FromGit) GetYamlPath() string {
	if o == nil || IsNil(o.YamlPath) {
		var ret string
		return ret
	}
	return *o.YamlPath
}

// GetYamlPathOk returns a tuple with the YamlPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FromGit) GetYamlPathOk() (*string, bool) {
	if o == nil || IsNil(o.YamlPath) {
		return nil, false
	}
	return o.YamlPath, true
}

// HasYamlPath returns a boolean if a field has been set.
func (o *FromGit) HasYamlPath() bool {
	if o != nil && !IsNil(o.YamlPath) {
		return true
	}

	return false
}

// SetYamlPath gets a reference to the given string and assigns it to the YamlPath field.
func (o *FromGit) SetYamlPath(v string) {
	o.YamlPath = &v
}

func (o FromGit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FromGit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.YamlPath) {
		toSerialize["yamlPath"] = o.YamlPath
	}
	return toSerialize, nil
}

type NullableFromGit struct {
	value *FromGit
	isSet bool
}

func (v NullableFromGit) Get() *FromGit {
	return v.value
}

func (v *NullableFromGit) Set(val *FromGit) {
	v.value = val
	v.isSet = true
}

func (v NullableFromGit) IsSet() bool {
	return v.isSet
}

func (v *NullableFromGit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFromGit(val *FromGit) *NullableFromGit {
	return &NullableFromGit{value: val, isSet: true}
}

func (v NullableFromGit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFromGit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
