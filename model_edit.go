/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the Edit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Edit{}

// Edit struct for Edit
type Edit struct {
	Values   *map[string]string `json:"values,omitempty"`
	Strategy *string            `json:"strategy,omitempty"`
}

// NewEdit instantiates a new Edit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdit() *Edit {
	this := Edit{}
	var strategy string = "merge"
	this.Strategy = &strategy
	return &this
}

// NewEditWithDefaults instantiates a new Edit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditWithDefaults() *Edit {
	this := Edit{}
	var strategy string = "merge"
	this.Strategy = &strategy
	return &this
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *Edit) GetValues() map[string]string {
	if o == nil || IsNil(o.Values) {
		var ret map[string]string
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Edit) GetValuesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *Edit) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given map[string]string and assigns it to the Values field.
func (o *Edit) SetValues(v map[string]string) {
	o.Values = &v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *Edit) GetStrategy() string {
	if o == nil || IsNil(o.Strategy) {
		var ret string
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Edit) GetStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.Strategy) {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *Edit) HasStrategy() bool {
	if o != nil && !IsNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given string and assigns it to the Strategy field.
func (o *Edit) SetStrategy(v string) {
	o.Strategy = &v
}

func (o Edit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Edit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	return toSerialize, nil
}

type NullableEdit struct {
	value *Edit
	isSet bool
}

func (v NullableEdit) Get() *Edit {
	return v.value
}

func (v *NullableEdit) Set(val *Edit) {
	v.value = val
	v.isSet = true
}

func (v NullableEdit) IsSet() bool {
	return v.isSet
}

func (v *NullableEdit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdit(val *Edit) *NullableEdit {
	return &NullableEdit{value: val, isSet: true}
}

func (v NullableEdit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
