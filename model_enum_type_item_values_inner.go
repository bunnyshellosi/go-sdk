/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// EnumTypeItemValuesInner - struct for EnumTypeItemValuesInner
type EnumTypeItemValuesInner struct {
	BooleanValueItem *BooleanValueItem
	FloatValueItem   *FloatValueItem
	IntegerValueItem *IntegerValueItem
	StringValueItem  *StringValueItem
}

// BooleanValueItemAsEnumTypeItemValuesInner is a convenience function that returns BooleanValueItem wrapped in EnumTypeItemValuesInner
func BooleanValueItemAsEnumTypeItemValuesInner(v *BooleanValueItem) EnumTypeItemValuesInner {
	return EnumTypeItemValuesInner{
		BooleanValueItem: v,
	}
}

// FloatValueItemAsEnumTypeItemValuesInner is a convenience function that returns FloatValueItem wrapped in EnumTypeItemValuesInner
func FloatValueItemAsEnumTypeItemValuesInner(v *FloatValueItem) EnumTypeItemValuesInner {
	return EnumTypeItemValuesInner{
		FloatValueItem: v,
	}
}

// IntegerValueItemAsEnumTypeItemValuesInner is a convenience function that returns IntegerValueItem wrapped in EnumTypeItemValuesInner
func IntegerValueItemAsEnumTypeItemValuesInner(v *IntegerValueItem) EnumTypeItemValuesInner {
	return EnumTypeItemValuesInner{
		IntegerValueItem: v,
	}
}

// StringValueItemAsEnumTypeItemValuesInner is a convenience function that returns StringValueItem wrapped in EnumTypeItemValuesInner
func StringValueItemAsEnumTypeItemValuesInner(v *StringValueItem) EnumTypeItemValuesInner {
	return EnumTypeItemValuesInner{
		StringValueItem: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *EnumTypeItemValuesInner) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'BooleanValue-item'
	if jsonDict["type"] == "BooleanValue-item" {
		// try to unmarshal JSON data into BooleanValueItem
		err = json.Unmarshal(data, &dst.BooleanValueItem)
		if err == nil {
			return nil // data stored in dst.BooleanValueItem, return on the first match
		} else {
			dst.BooleanValueItem = nil
			return fmt.Errorf("failed to unmarshal EnumTypeItemValuesInner as BooleanValueItem: %s", err.Error())
		}
	}

	// check if the discriminator value is 'FloatValue-item'
	if jsonDict["type"] == "FloatValue-item" {
		// try to unmarshal JSON data into FloatValueItem
		err = json.Unmarshal(data, &dst.FloatValueItem)
		if err == nil {
			return nil // data stored in dst.FloatValueItem, return on the first match
		} else {
			dst.FloatValueItem = nil
			return fmt.Errorf("failed to unmarshal EnumTypeItemValuesInner as FloatValueItem: %s", err.Error())
		}
	}

	// check if the discriminator value is 'IntegerValue-item'
	if jsonDict["type"] == "IntegerValue-item" {
		// try to unmarshal JSON data into IntegerValueItem
		err = json.Unmarshal(data, &dst.IntegerValueItem)
		if err == nil {
			return nil // data stored in dst.IntegerValueItem, return on the first match
		} else {
			dst.IntegerValueItem = nil
			return fmt.Errorf("failed to unmarshal EnumTypeItemValuesInner as IntegerValueItem: %s", err.Error())
		}
	}

	// check if the discriminator value is 'StringValue-item'
	if jsonDict["type"] == "StringValue-item" {
		// try to unmarshal JSON data into StringValueItem
		err = json.Unmarshal(data, &dst.StringValueItem)
		if err == nil {
			return nil // data stored in dst.StringValueItem, return on the first match
		} else {
			dst.StringValueItem = nil
			return fmt.Errorf("failed to unmarshal EnumTypeItemValuesInner as StringValueItem: %s", err.Error())
		}
	}

	// check if the discriminator value is 'bool'
	if jsonDict["type"] == "bool" {
		// try to unmarshal JSON data into BooleanValueItem
		err = json.Unmarshal(data, &dst.BooleanValueItem)
		if err == nil {
			return nil // data stored in dst.BooleanValueItem, return on the first match
		} else {
			dst.BooleanValueItem = nil
			return fmt.Errorf("failed to unmarshal EnumTypeItemValuesInner as BooleanValueItem: %s", err.Error())
		}
	}

	// check if the discriminator value is 'float'
	if jsonDict["type"] == "float" {
		// try to unmarshal JSON data into FloatValueItem
		err = json.Unmarshal(data, &dst.FloatValueItem)
		if err == nil {
			return nil // data stored in dst.FloatValueItem, return on the first match
		} else {
			dst.FloatValueItem = nil
			return fmt.Errorf("failed to unmarshal EnumTypeItemValuesInner as FloatValueItem: %s", err.Error())
		}
	}

	// check if the discriminator value is 'int'
	if jsonDict["type"] == "int" {
		// try to unmarshal JSON data into IntegerValueItem
		err = json.Unmarshal(data, &dst.IntegerValueItem)
		if err == nil {
			return nil // data stored in dst.IntegerValueItem, return on the first match
		} else {
			dst.IntegerValueItem = nil
			return fmt.Errorf("failed to unmarshal EnumTypeItemValuesInner as IntegerValueItem: %s", err.Error())
		}
	}

	// check if the discriminator value is 'string'
	if jsonDict["type"] == "string" {
		// try to unmarshal JSON data into StringValueItem
		err = json.Unmarshal(data, &dst.StringValueItem)
		if err == nil {
			return nil // data stored in dst.StringValueItem, return on the first match
		} else {
			dst.StringValueItem = nil
			return fmt.Errorf("failed to unmarshal EnumTypeItemValuesInner as StringValueItem: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EnumTypeItemValuesInner) MarshalJSON() ([]byte, error) {
	if src.BooleanValueItem != nil {
		return json.Marshal(&src.BooleanValueItem)
	}

	if src.FloatValueItem != nil {
		return json.Marshal(&src.FloatValueItem)
	}

	if src.IntegerValueItem != nil {
		return json.Marshal(&src.IntegerValueItem)
	}

	if src.StringValueItem != nil {
		return json.Marshal(&src.StringValueItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EnumTypeItemValuesInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BooleanValueItem != nil {
		return obj.BooleanValueItem
	}

	if obj.FloatValueItem != nil {
		return obj.FloatValueItem
	}

	if obj.IntegerValueItem != nil {
		return obj.IntegerValueItem
	}

	if obj.StringValueItem != nil {
		return obj.StringValueItem
	}

	// all schemas are nil
	return nil
}

type NullableEnumTypeItemValuesInner struct {
	value *EnumTypeItemValuesInner
	isSet bool
}

func (v NullableEnumTypeItemValuesInner) Get() *EnumTypeItemValuesInner {
	return v.value
}

func (v *NullableEnumTypeItemValuesInner) Set(val *EnumTypeItemValuesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumTypeItemValuesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumTypeItemValuesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumTypeItemValuesInner(val *EnumTypeItemValuesInner) *NullableEnumTypeItemValuesInner {
	return &NullableEnumTypeItemValuesInner{value: val, isSet: true}
}

func (v NullableEnumTypeItemValuesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumTypeItemValuesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
