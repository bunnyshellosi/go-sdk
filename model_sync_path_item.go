/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// SyncPathItem struct for SyncPathItem
type SyncPathItem struct {
	// The local path on the host os to sync from.
	LocalPath NullableString `json:"localPath,omitempty"`
	// The remote path on the container to sync to.
	RemotePath *string `json:"remotePath,omitempty"`
}

// NewSyncPathItem instantiates a new SyncPathItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncPathItem() *SyncPathItem {
	this := SyncPathItem{}
	return &this
}

// NewSyncPathItemWithDefaults instantiates a new SyncPathItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncPathItemWithDefaults() *SyncPathItem {
	this := SyncPathItem{}
	return &this
}

// GetLocalPath returns the LocalPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SyncPathItem) GetLocalPath() string {
	if o == nil || o.LocalPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.LocalPath.Get()
}

// GetLocalPathOk returns a tuple with the LocalPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SyncPathItem) GetLocalPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalPath.Get(), o.LocalPath.IsSet()
}

// HasLocalPath returns a boolean if a field has been set.
func (o *SyncPathItem) HasLocalPath() bool {
	if o != nil && o.LocalPath.IsSet() {
		return true
	}

	return false
}

// SetLocalPath gets a reference to the given NullableString and assigns it to the LocalPath field.
func (o *SyncPathItem) SetLocalPath(v string) {
	o.LocalPath.Set(&v)
}

// SetLocalPathNil sets the value for LocalPath to be an explicit nil
func (o *SyncPathItem) SetLocalPathNil() {
	o.LocalPath.Set(nil)
}

// UnsetLocalPath ensures that no value is present for LocalPath, not even an explicit nil
func (o *SyncPathItem) UnsetLocalPath() {
	o.LocalPath.Unset()
}

// GetRemotePath returns the RemotePath field value if set, zero value otherwise.
func (o *SyncPathItem) GetRemotePath() string {
	if o == nil || o.RemotePath == nil {
		var ret string
		return ret
	}
	return *o.RemotePath
}

// GetRemotePathOk returns a tuple with the RemotePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncPathItem) GetRemotePathOk() (*string, bool) {
	if o == nil || o.RemotePath == nil {
		return nil, false
	}
	return o.RemotePath, true
}

// HasRemotePath returns a boolean if a field has been set.
func (o *SyncPathItem) HasRemotePath() bool {
	if o != nil && o.RemotePath != nil {
		return true
	}

	return false
}

// SetRemotePath gets a reference to the given string and assigns it to the RemotePath field.
func (o *SyncPathItem) SetRemotePath(v string) {
	o.RemotePath = &v
}

func (o SyncPathItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LocalPath.IsSet() {
		toSerialize["localPath"] = o.LocalPath.Get()
	}
	if o.RemotePath != nil {
		toSerialize["remotePath"] = o.RemotePath
	}
	return json.Marshal(toSerialize)
}

type NullableSyncPathItem struct {
	value *SyncPathItem
	isSet bool
}

func (v NullableSyncPathItem) Get() *SyncPathItem {
	return v.value
}

func (v *NullableSyncPathItem) Set(val *SyncPathItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncPathItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncPathItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncPathItem(val *SyncPathItem) *NullableSyncPathItem {
	return &NullableSyncPathItem{value: val, isSet: true}
}

func (v NullableSyncPathItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncPathItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
