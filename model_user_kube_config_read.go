/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UserKubeConfigRead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserKubeConfigRead{}

// UserKubeConfigRead struct for UserKubeConfigRead
type UserKubeConfigRead struct {
	Token                 *string `json:"token,omitempty"`
	ClientCertificateData *string `json:"client-certificate-data,omitempty"`
	ClientKeyData         *string `json:"client-key-data,omitempty"`
}

// NewUserKubeConfigRead instantiates a new UserKubeConfigRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserKubeConfigRead() *UserKubeConfigRead {
	this := UserKubeConfigRead{}
	return &this
}

// NewUserKubeConfigReadWithDefaults instantiates a new UserKubeConfigRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserKubeConfigReadWithDefaults() *UserKubeConfigRead {
	this := UserKubeConfigRead{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *UserKubeConfigRead) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserKubeConfigRead) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *UserKubeConfigRead) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *UserKubeConfigRead) SetToken(v string) {
	o.Token = &v
}

// GetClientCertificateData returns the ClientCertificateData field value if set, zero value otherwise.
func (o *UserKubeConfigRead) GetClientCertificateData() string {
	if o == nil || IsNil(o.ClientCertificateData) {
		var ret string
		return ret
	}
	return *o.ClientCertificateData
}

// GetClientCertificateDataOk returns a tuple with the ClientCertificateData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserKubeConfigRead) GetClientCertificateDataOk() (*string, bool) {
	if o == nil || IsNil(o.ClientCertificateData) {
		return nil, false
	}
	return o.ClientCertificateData, true
}

// HasClientCertificateData returns a boolean if a field has been set.
func (o *UserKubeConfigRead) HasClientCertificateData() bool {
	if o != nil && !IsNil(o.ClientCertificateData) {
		return true
	}

	return false
}

// SetClientCertificateData gets a reference to the given string and assigns it to the ClientCertificateData field.
func (o *UserKubeConfigRead) SetClientCertificateData(v string) {
	o.ClientCertificateData = &v
}

// GetClientKeyData returns the ClientKeyData field value if set, zero value otherwise.
func (o *UserKubeConfigRead) GetClientKeyData() string {
	if o == nil || IsNil(o.ClientKeyData) {
		var ret string
		return ret
	}
	return *o.ClientKeyData
}

// GetClientKeyDataOk returns a tuple with the ClientKeyData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserKubeConfigRead) GetClientKeyDataOk() (*string, bool) {
	if o == nil || IsNil(o.ClientKeyData) {
		return nil, false
	}
	return o.ClientKeyData, true
}

// HasClientKeyData returns a boolean if a field has been set.
func (o *UserKubeConfigRead) HasClientKeyData() bool {
	if o != nil && !IsNil(o.ClientKeyData) {
		return true
	}

	return false
}

// SetClientKeyData gets a reference to the given string and assigns it to the ClientKeyData field.
func (o *UserKubeConfigRead) SetClientKeyData(v string) {
	o.ClientKeyData = &v
}

func (o UserKubeConfigRead) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserKubeConfigRead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.ClientCertificateData) {
		toSerialize["client-certificate-data"] = o.ClientCertificateData
	}
	if !IsNil(o.ClientKeyData) {
		toSerialize["client-key-data"] = o.ClientKeyData
	}
	return toSerialize, nil
}

type NullableUserKubeConfigRead struct {
	value *UserKubeConfigRead
	isSet bool
}

func (v NullableUserKubeConfigRead) Get() *UserKubeConfigRead {
	return v.value
}

func (v *NullableUserKubeConfigRead) Set(val *UserKubeConfigRead) {
	v.value = val
	v.isSet = true
}

func (v NullableUserKubeConfigRead) IsSet() bool {
	return v.isSet
}

func (v *NullableUserKubeConfigRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserKubeConfigRead(val *UserKubeConfigRead) *NullableUserKubeConfigRead {
	return &NullableUserKubeConfigRead{value: val, isSet: true}
}

func (v NullableUserKubeConfigRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserKubeConfigRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
