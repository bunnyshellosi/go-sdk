/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// Ephemeral struct for Ephemeral
type Ephemeral struct {
	Type *string `json:"type,omitempty"`
}

// NewEphemeral instantiates a new Ephemeral object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEphemeral() *Ephemeral {
	this := Ephemeral{}
	var type_ string = "ephemeral"
	this.Type = &type_
	return &this
}

// NewEphemeralWithDefaults instantiates a new Ephemeral object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEphemeralWithDefaults() *Ephemeral {
	this := Ephemeral{}
	var type_ string = "ephemeral"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Ephemeral) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ephemeral) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Ephemeral) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Ephemeral) SetType(v string) {
	o.Type = &v
}

func (o Ephemeral) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableEphemeral struct {
	value *Ephemeral
	isSet bool
}

func (v NullableEphemeral) Get() *Ephemeral {
	return v.value
}

func (v *NullableEphemeral) Set(val *Ephemeral) {
	v.value = val
	v.isSet = true
}

func (v NullableEphemeral) IsSet() bool {
	return v.isSet
}

func (v *NullableEphemeral) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEphemeral(val *Ephemeral) *NullableEphemeral {
	return &NullableEphemeral{value: val, isSet: true}
}

func (v NullableEphemeral) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEphemeral) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
