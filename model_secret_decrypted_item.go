/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the SecretDecryptedItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretDecryptedItem{}

// SecretDecryptedItem A secret is used to encrypt plain texts and decrypt cipher texts.
type SecretDecryptedItem struct {
	// Plain text.
	PlainText *string `json:"plainText,omitempty"`
	// Organization identifier.
	Organization *string `json:"organization,omitempty"`
}

// NewSecretDecryptedItem instantiates a new SecretDecryptedItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretDecryptedItem() *SecretDecryptedItem {
	this := SecretDecryptedItem{}
	return &this
}

// NewSecretDecryptedItemWithDefaults instantiates a new SecretDecryptedItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretDecryptedItemWithDefaults() *SecretDecryptedItem {
	this := SecretDecryptedItem{}
	return &this
}

// GetPlainText returns the PlainText field value if set, zero value otherwise.
func (o *SecretDecryptedItem) GetPlainText() string {
	if o == nil || IsNil(o.PlainText) {
		var ret string
		return ret
	}
	return *o.PlainText
}

// GetPlainTextOk returns a tuple with the PlainText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretDecryptedItem) GetPlainTextOk() (*string, bool) {
	if o == nil || IsNil(o.PlainText) {
		return nil, false
	}
	return o.PlainText, true
}

// HasPlainText returns a boolean if a field has been set.
func (o *SecretDecryptedItem) HasPlainText() bool {
	if o != nil && !IsNil(o.PlainText) {
		return true
	}

	return false
}

// SetPlainText gets a reference to the given string and assigns it to the PlainText field.
func (o *SecretDecryptedItem) SetPlainText(v string) {
	o.PlainText = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *SecretDecryptedItem) GetOrganization() string {
	if o == nil || IsNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretDecryptedItem) GetOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *SecretDecryptedItem) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *SecretDecryptedItem) SetOrganization(v string) {
	o.Organization = &v
}

func (o SecretDecryptedItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretDecryptedItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PlainText) {
		toSerialize["plainText"] = o.PlainText
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	return toSerialize, nil
}

type NullableSecretDecryptedItem struct {
	value *SecretDecryptedItem
	isSet bool
}

func (v NullableSecretDecryptedItem) Get() *SecretDecryptedItem {
	return v.value
}

func (v *NullableSecretDecryptedItem) Set(val *SecretDecryptedItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretDecryptedItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretDecryptedItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretDecryptedItem(val *SecretDecryptedItem) *NullableSecretDecryptedItem {
	return &NullableSecretDecryptedItem{value: val, isSet: true}
}

func (v NullableSecretDecryptedItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretDecryptedItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
