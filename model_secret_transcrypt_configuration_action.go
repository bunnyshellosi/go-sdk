/*
API Bunnyshell Environments

Interact with Bunnyshell Platform

API version: 1.1.0
Contact: osi+support@bunnyshell.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the SecretTranscryptConfigurationAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretTranscryptConfigurationAction{}

// SecretTranscryptConfigurationAction A secret is used to encrypt plain texts and decrypt cipher texts.
type SecretTranscryptConfigurationAction struct {
	Yaml         string `json:"yaml"`
	Mode         string `json:"mode"`
	Organization string `json:"organization"`
}

// NewSecretTranscryptConfigurationAction instantiates a new SecretTranscryptConfigurationAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretTranscryptConfigurationAction(yaml string, mode string, organization string) *SecretTranscryptConfigurationAction {
	this := SecretTranscryptConfigurationAction{}
	this.Yaml = yaml
	this.Mode = mode
	this.Organization = organization
	return &this
}

// NewSecretTranscryptConfigurationActionWithDefaults instantiates a new SecretTranscryptConfigurationAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretTranscryptConfigurationActionWithDefaults() *SecretTranscryptConfigurationAction {
	this := SecretTranscryptConfigurationAction{}
	return &this
}

// GetYaml returns the Yaml field value
func (o *SecretTranscryptConfigurationAction) GetYaml() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Yaml
}

// GetYamlOk returns a tuple with the Yaml field value
// and a boolean to check if the value has been set.
func (o *SecretTranscryptConfigurationAction) GetYamlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Yaml, true
}

// SetYaml sets field value
func (o *SecretTranscryptConfigurationAction) SetYaml(v string) {
	o.Yaml = v
}

// GetMode returns the Mode field value
func (o *SecretTranscryptConfigurationAction) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *SecretTranscryptConfigurationAction) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *SecretTranscryptConfigurationAction) SetMode(v string) {
	o.Mode = v
}

// GetOrganization returns the Organization field value
func (o *SecretTranscryptConfigurationAction) GetOrganization() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
func (o *SecretTranscryptConfigurationAction) GetOrganizationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Organization, true
}

// SetOrganization sets field value
func (o *SecretTranscryptConfigurationAction) SetOrganization(v string) {
	o.Organization = v
}

func (o SecretTranscryptConfigurationAction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretTranscryptConfigurationAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["yaml"] = o.Yaml
	toSerialize["mode"] = o.Mode
	toSerialize["organization"] = o.Organization
	return toSerialize, nil
}

type NullableSecretTranscryptConfigurationAction struct {
	value *SecretTranscryptConfigurationAction
	isSet bool
}

func (v NullableSecretTranscryptConfigurationAction) Get() *SecretTranscryptConfigurationAction {
	return v.value
}

func (v *NullableSecretTranscryptConfigurationAction) Set(val *SecretTranscryptConfigurationAction) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretTranscryptConfigurationAction) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretTranscryptConfigurationAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretTranscryptConfigurationAction(val *SecretTranscryptConfigurationAction) *NullableSecretTranscryptConfigurationAction {
	return &NullableSecretTranscryptConfigurationAction{value: val, isSet: true}
}

func (v NullableSecretTranscryptConfigurationAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretTranscryptConfigurationAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
